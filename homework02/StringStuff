/** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  File name     :  StringStuff.java
 *  Purpose       :  A file full of stuff to do with the Java String class
 *  Author        :  B.J. Johnson
 *  Date          :  2017-01-19
 *  Description   :  This file presents a bunch of String-style helper methods.  Although pretty much
 *                   any and every thing you'd want to do with Strings is already made for you in the
 *                   Jave String class, this exercise gives you a chance to do it yourself [DIY] for some
 *                   of it and get some experience with designing code that you can then check out using
 *                   the real Java String methods [if you want]
 *  Notes         :  None
 *  Warnings      :  None
 *  Exceptions    :  None
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  Revision History
 *  ----------------
 *            Rev      Date     Modified by:  Reason for change/modification
 *           -----  ----------  ------------  -----------------------------------------------------------
 *  @version 1.0.0  2017-01-19  B.J. Johnson  Initial writing and release
 *  @version 1.1.0  2017-01-22  B.J. Johnson  Fill in methods to make the program actually work
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
import java.util.Set;
import java.util.LinkedHashSet;

public class StringStuff{

   public static boolean containsVowel( String s ) {

     for(int i=0; i < s.length(); i++){

       switch(s.charAt(i)){

         case 'A':
         case 'E':
         case 'I':
         case 'O':
         case 'U':
         case 'Y':
         case 'a':
         case 'e':
         case 'i':
         case 'o':
         case 'u':
         case 'y':

         return true;
         default: continue;

       }
      }
      return false;
   }

   public static boolean isPalindrome( String s ) {
      int v = (s.length() - 1);
        if ((s.length() - 1) == 0) {
        return true;
    } else {
      for (int i = 0; i < ((s.length() - 1)/2); i++) {
        if (s.charAt(i) == s.charAt(v)) {
        v = v - 1;
        continue;
        } else {
          return false;
          }
        }
      return true;
    }
  }

   public static String evensOnly( String s ) {

     String final0 = new String ("");
     String evensTrial = "bdfhjlnprtvxzBDFHJLNPRTVXZ";
         for ( int i = 0; i<s.length(); i++){
         if ( evensTrial.contains(Character.toString(s.charAt(i)))){
         final0 = final0.concat(Character.toString(s.charAt(i)));
        }
      }
      return final0;
   }

   public static String oddsOnly( String s ) {
       String oddsTrial = "acegikmoqsuwyACEGIKMOQSUWY";
       String final2 = new String ("");
          for ( int i = 0; i<s.length(); i++){
          if ( oddsTrial.contains(Character.toString(s.charAt(i)))){
          final2 = final2.concat(Character.toString(s.charAt(i)));
          }
        }
      return final2;
     }

   public static String evensOnlyNoDupes( String s ) {
     String ts = new String (evensOnly(s));
     String final3 =  ("");
       for (int i = 0; i<ts.length(); i++){
       if (!final3.contains(Character.toString(ts.charAt(i)))){
       final3 = final3.concat(Character.toString(ts.charAt(i)));
       }
       }
      return final3;
   }

   public static String oddsOnlyNoDupes( String s ) {
     String zv = new String (oddsOnly(s));
     String final4 =  ("");
       for (int i = 0; i<zv.length(); i++){
       if (!final4.contains(Character.toString(zv.charAt(i)))){
       final4 = final4.concat(Character.toString(zv.charAt(i)));
       }
       }
     return final4;
   }

   public static String reverse( String s ) {
     String opposite = new String ("");
       for ( int i = s.length()-1; i >= 0; i = i-1){
       opposite = opposite.concat(Character.toString(s.charAt(i)));
     }
     return opposite;
   }
 }
